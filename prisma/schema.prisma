// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a relation to the user's role
  role     Role
  customer Customer?
  admin    Admin?

  @@map("user")
}

model Customer {
  id           String  @id @default(uuid())
  name         String
  profileImage String?
  email        String  @unique
  contactNo    String?
  gender       String?
  bloodGroup   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [userId])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookings  Bookings[]
  Orders    Orders[]

  @@map("customer")
}

model Admin {
  id           String  @id @default(uuid())
  name         String
  profileImage String?
  email        String
  contactNo    String?
  gender       String?
  bloodGroup   String?
  role         Role

  userId String @unique
  user   User   @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model ServiceCategory {
  id           String  @id @default(uuid())
  categoryName String  @unique
  imageUrl     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  service   Service[]

  @@map("service_category")
}

model Service {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ctegoryId String
  category  ServiceCategory @relation(fields: [ctegoryId], references: [id])
  Orders    Orders[]

  @@map("service")
}

model Bookings {
  id           String   @id @default(uuid())
  bookingDate  DateTime @default(now())
  deliveryDate DateTime
  price        Int

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Orders {
  id        String       @id @default(uuid())
  orderDate DateTime     @default(now())
  status    Order_Status
  price     Int

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

// model RepairServiceCategory

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Order_Status {
  COMPLETE
  INCOMPLETE
}

enum Role {
  ADMIN
  SUPER_ADMIN
  CUSTOMER
}

enum Fuel {
  OKTEN
  DISEL
  PETROL
}

enum PaymentStatus {
  PENDING
  FULL_PAID
}
