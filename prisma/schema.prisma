// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a relation to the user's role
  role                Role
  customer            Customer?
  admin               Admin?
  LatestViewedService LatestViewedService[]

  @@map("user")
}

model Customer {
  id           String  @id @default(uuid())
  name         String
  profileImage String?
  email        String  @unique
  contactNo    String?
  gender       String?
  bloodGroup   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [userId])

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bookings         Bookings[]
  orders           Orders[]
  reviews          Review[]
  serviceFeedbacks ServiceFeedback[]

  @@map("customer")
}

model Admin {
  id           String  @id @default(uuid())
  name         String
  profileImage String?
  email        String
  contactNo    String?
  gender       String?
  bloodGroup   String?
  role         Role

  userId String @unique
  user   User   @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model ServiceCategory {
  id           String  @id @default(uuid())
  categoryName String  @unique
  imageUrl     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]

  @@map("service_category")
}

model VehicleType {
  id   String @id @default(uuid())
  type String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicles Vehicle[]

  @@map("vehicle_type")
}

model Vehicle {
  id String @id @default(uuid())

  vehicleType String
  type        VehicleType @relation(fields: [vehicleType], references: [type])

  model  String
  images String[]
  cc     Int
  weight Int?
  brand  String

  bookings       Bookings[]
  serviceVehicle ServiceVehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicle")
}

model Service {
  id            String  @id @default(uuid())
  title         String
  details       String
  description   String
  price         Int
  rating        Int     @default(0)
  imageUrl      String?
  published     Boolean @default(true)
  specification String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  orders   Orders[]
  bookings Bookings[]
  reviews  Review[]

  serviceVehicles      ServiceVehicle[]
  serviceFeedbacks     ServiceFeedback[]
  latestViewedServices LatestViewedService[]

  @@map("service")
}

// Introduce a junction table to represent the many-to-many relationship
model ServiceVehicle {
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([serviceId, vehicleId])
  @@map("service_vehicle")
}

model Bookings {
  id               String        @id @default(uuid())
  bookingDate      DateTime      @default(now())
  serviceAvailDate String
  serviceAvailTime String
  paymentStatus    PaymentStatus @default(PENDING)
  orderPlaceAt     OrderPlace
  address          String?
  phoneNumber      String
  total            Int
  bookingStatus    BookingStatus @default(PENDING)
  addiotionalInfo  String?

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

enum OrderPlace {
  SERVICE_POINT
  AT_HOME
}

enum BookingStatus {
  PENDING
  COMPLETE
  REJECT
}

model Review {
  id      String @id @default(uuid())
  details String

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Orders {
  id        String      @id @default(uuid())
  orderDate DateTime    @default(now())
  status    OrderStatus

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model ServiceFeedback {
  id String @id @default(uuid())

  description String

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_feedback")
}

model LatestNews {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("latest_news")
}

model LatestViewedService {
  id Int @id @default(autoincrement())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  viewedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("latest_views_services")
}

// model RepairServiceCategory

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum OrderStatus {
  COMPLETE
  INCOMPLETE
}

enum Role {
  ADMIN
  SUPER_ADMIN
  CUSTOMER
}

enum Fuel {
  OKTEN
  DISEL
  PETROL
}

enum PaymentStatus {
  PENDING
  PAID
}
